package {{ .Schema.PackageName }}

import (
	"database/sql"
    "fmt"
  	"github.com/GPA-Gruppo-Progetti-Avanzati-SRL/tpm-batis/sqlmapper"
  	"github.com/jmoiron/sqlx"
  	"github.com/rs/zerolog/log"
)

type DeleteOptions struct {
       rowsAffectedWanted int64
}

type DeleteOp func(u *DeleteOptions)

func DeleteWithRowsAffectedWanted(p int64) DeleteOp {
	return func(u *DeleteOptions) {
		u.rowsAffectedWanted = p
	}
}

func Delete(sqlDbOrTx interface{}, filter sqlmapper.Filter, opts ...DeleteOp) (int, error) {

    const semLogContext = "{{ .Schema.PackageName }}::delete"

	deleteOptions := DeleteOptions{rowsAffectedWanted:-1}
	for _, o := range opts {
		o(&deleteOptions)
	}

	var mapp map[string]interface{}
	mapp = map[string]interface{}{
		"filter": filter,
	}

	sqlStmt, err := mapper.GetMappedStatement("delete", mapp)
	if err != nil {
		return 0, err
	}

    var r sql.Result
	switch db := sqlDbOrTx.(type) {
	case *sqlx.DB:
		r, err = db.Exec(sqlStmt.GetStatement(), sqlStmt.GetParams()...)
	case *sqlx.Tx:
		r, err = db.Exec(sqlStmt.GetStatement(), sqlStmt.GetParams()...)
	default:
		return 0, fmt.Errorf("delete accepts *sqlx.DB or *sqlx.Tx objects, provided %T", sqlDbOrTx)
	}

	if err != nil {
		return 0, err
	}

	n, err := r.RowsAffected()
	if err != nil {
		log.Warn().Err(err).Msg(semLogContext)
		return 0, err
	}

	if deleteOptions.rowsAffectedWanted >= 0 {
        if n != deleteOptions.rowsAffectedWanted {
            err = fmt.Errorf("mismatch between number of rows affected (%d) and wanted (%d)", n, deleteOptions.rowsAffectedWanted)
            log.Error().Err(err).Msg(semLogContext)
            return 0, err
        }
    }

	return int(n), nil
}

func DeleteByPrimaryKey(tx *sqlx.Tx, pk PrimaryKey, opts ...DeleteOp) (int, error) {

    const semLogContext = "{{ .Schema.PackageName }}::delete-by-primary-key"

	deleteOptions := DeleteOptions{rowsAffectedWanted:-1}
	for _, o := range opts {
		o(&deleteOptions)
	}

	var mapp map[string]interface{}
	mapp = map[string]interface{}{
		"pk": pk,
	}

	sqlStmt, err := mapper.GetMappedStatement("deleteByPrimaryKey", mapp)
	if err != nil {
		return 0, err
	}

	r, err := tx.Exec(sqlStmt.GetStatement(), sqlStmt.GetParams()...)
	if err != nil {
		return 0, err
	}

	n, err := r.RowsAffected()
	if err != nil {
    	log.Warn().Err(err).Msg(semLogContext)
    	return 0, err
    }

    if deleteOptions.rowsAffectedWanted >= 0 {
           if n != deleteOptions.rowsAffectedWanted {
               err = fmt.Errorf("mismatch between number of rows affected (%d) and wanted (%d)", n, deleteOptions.rowsAffectedWanted)
               log.Error().Err(err).Msg(semLogContext)
               return 0, err
           }
    }

	return int(n), nil
}