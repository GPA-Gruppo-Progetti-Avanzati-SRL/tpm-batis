package {{ .Schema.PackageName }}_test
{{ $pkg := .Schema.PackageName }}

import (
	"{{ .Schema.Properties.Package }}"
	"github.com/GPA-Gruppo-Progetti-Avanzati-SRL/tpm-batis/sqlmapper"
{{range $pkg := .GoPackageImports "entity" }}
   "{{$pkg}}"
{{- end}}
	"github.com/GPA-Gruppo-Progetti-Avanzati-SRL/tpm-batis/sqllks"
	"github.com/GPA-Gruppo-Progetti-Avanzati-SRL/tpm-batis/sqlutil"
	_ "github.com/lib/pq"
	"github.com/stretchr/testify/require"
	"os"
	"strconv"
	"testing"
)

const (
	SQLHOSTENVVAR   = "SQL_HOST"
	SQLDBENVVAR     = "SQL_DB"
	SQLUSERENVVAR   = "SQL_USER"
	SQLPASSWDENVVAR = "SQL_PASSWD"
	SQLPORTENVVAR   = "SQL_PORT"
)

func TestMain(m *testing.M) {

	p, err := strconv.Atoi(os.Getenv(SQLPORTENVVAR))
	if err != nil {
		panic(err)
	}

	cfg := sqllks.Config{
		ServerName:      "default",
		ServerType:      "pq",
		Host:            os.Getenv(SQLHOSTENVVAR),
		Port:            p,
		DbName:          os.Getenv(SQLDBENVVAR),
		UserName:        os.Getenv(SQLUSERENVVAR),
		Password:        os.Getenv(SQLPASSWDENVVAR),
		SslMode:         false,
		EnableMigration: false,
		MaxOpenConns:    0,
		MaxIdleConns:    0,
		ConnMaxLifetime: 0,
		ConnMaxIdleTime: 0,
	}

	_, err = sqllks.Initialize([]sqllks.Config{cfg})
	if err != nil {
		panic(err)
	}

	exitVal := m.Run()
	os.Exit(exitVal)
}

const doDDL = false

func Test{{.Schema.Properties.StructName}}(t *testing.T) {
	lks, err := sqllks.GetLinkedService("default")
	require.NoError(t, err)

	sqlDb, err := lks.DB()
	require.NoError(t, err)

	if doDDL {
	   t.Log("ddl execution")
	   sqlDb.MustExec({{ .Schema.PackageName }}.{{.Schema.Properties.StructName}}TableDDL)
	   defer sqlDb.MustExec({{ .Schema.PackageName }}.{{.Schema.Properties.StructName}}TableDropDDL)
    }

	{{- if eq .Schema.Properties.DbType "table" }}
	t.Log("insert statement")
	p := {{ .Schema.PackageName }}.{{.Schema.Properties.StructName}}{
	    /*  complete as needed */
        {{- range $a := .Attributes}}
           {{ $a.GoAttributeName }}: {{ $a.GoSampleValue $pkg }},
        {{- end}}
	}

	_, err = {{ .Schema.PackageName }}.Insert(sqlDb, &p)
	require.NoError(t, err)

	t.Log("update statement")
	uopts := []{{ .Schema.PackageName }}.UpdateOp{
	     {{ $pkg }}.UpdateWithRowsAffectedWanted(1),
	    /*  complete as needed */
	    {{- range $a := .Attributes}}{{ if $a.GetDefinition.WithUpdate }}
               {{ $pkg }}.UpdateWith{{ $a.GoAttributeName }}({{ $a.GoSampleValue $pkg }}),
        {{- end}}{{- end}}
	}

	_, err = {{ .Schema.PackageName }}.Update(sqlDb, {{ .Schema.PackageName }}.NewFilterBuilder().Build(), uopts...)
	require.NoError(t, err)
	{{- end}}

    t.Log("select statement")
	f := sqlmapper.NewFilterBuilder().Limit(2).Offset(0)
	l, err := {{ .Schema.PackageName }}.Select(sqlDb, f.Build())
	require.NoError(t, err)
	for i, e := range l {
		t.Logf("row: %d - %v", i, e)
	}

    {{- if .Schema.HasPrimaryKey }}
    t.Log("select-by-primary-key statement")
	e, err := {{ .Schema.PackageName }}.SelectByPrimaryKey(sqlDb, {{ .Schema.PackageName }}.PrimaryKey{ {{- range $i, $a := .PkAttributes}} {{ if $i }},{{- end }} {{ $a.GoAttributeName }} : {{ $a.GoSampleValue  $pkg }} {{ end }} })
 	require.NoError(t, err)
 	t.Log(e)
	{{- end}}

}
